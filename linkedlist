#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

struct Node
{
    int data;
    Node* next;
};
typedef Node* List;

void Initlist(List& list)
{
    list = new Node;
    list->data = 0;
    list->next = NULL;
}

void Frontinsert(List& list, int a)//Front insertion
{
    List l = new Node;
    if (!l)
        exit(0);
    l->data = a;
    l->next = list->next;
    list->next = l;
}

void Frontbuild(List& list, int n)//Front insertion establishment
{
    int m;
    for (int i = 0; i < n; i++)
    {
        cout << "Enter the" << i + 1 << "element of the linked list: " << endl;
        cin >> m;
        Frontinsert(list, m);
    }
}

void Rearinsert(List& list, int a)//Rear insertion
{
    List l = new Node;
    if (!l)
        exit(0);
    List p = list;
    while (p->next != NULL)
    {
        p = p->next;
    }
    l->data = a;
    l->next = NULL;
    p->next = l;
}

void Rearbuild(List& list, int n)//Rear insertion establishment
{
    int m;
    for (int i = 0; i < n; i++)
    {
        cout << "Enter the" << i + 1 << "element of the linked list: " << endl;
        cin >> m;
        Rearinsert(list, m);
    }
}

void Checklink1(List& list, int a)//Search by value
{
    List p = list;
    int count = 0;
    while (p->next != NULL)
    {
        p = p->next;
        count++;
        if (p->data == a)
        {
            cout << "The element with value" << a << "is in the" << count << "position" << endl;
        }
    }
    if (count == 1)
    {
        cout << "No element with the corresponding value was found" << endl;
    }
}

void Checklink2(List& list, int a)//Search by location
{
    List p = list;
    for (int i = 0; i < a; i++)
    {
        p = p->next;
    }
    cout << "The" << a << "element is" << p->data << endl;
}

void FrontInsertlink1(List& list, int a, int b)//Insert by value (insert a to the front of b)
{
    List p = list;
    List l = new Node;
    while (p->next != NULL)
    {
        p = p->next;
        if (p->next->data == b)
        {
            l->data = a;
            l->next = p->next;
            p->next = l;
            break;
        }
    }
}

void RearInsertlink1(List& list, int a, int b)//Insert by value (insert a after b)
{
    List p = list;
    List l = new Node;
    while (p->next != NULL)
    {
        p = p->next;
        if (p->data == b)
        {
            l->data = a;
            l->next = p->next;
            p->next = l;
            break;
        }
    }
}

void Insertlink2(List& list, int a, int b)//Insert by position (insert a value into b position)
{
    List p = list;
    List l = new Node;
    for (int i = 0; i < b - 1; i++)
    {
        p = p->next;
    }
    l->data = a;
    l->next = p->next;
    p->next = l;
}


void Delete1(List& list, int a)//Delete the element with value a
{
    List p = list;
    while (p->next != NULL)
    {
        if (p->next->data == a)
        {
            p->next = p->next->next;
        }
    }
}

void Delete2(List& list, int a)//Delete the element at position a
{
    List p = list;
    for (int i = 0; i < a - 1; i++)
    {
        p->next = p->next->next;
    }
}

void Printlist(List& list)
{
    List p = list;
    cout << "The elements in the linked list are:";
    while (p->next != NULL)
    {
        p = p->next;
        cout << p->data << " ";
    }
    cout << endl;
}

int main()
{
    List list;
    Initlist(list);
    cout << "1.  Create a linked list by inserting in the front" << endl;
    cout << "2.  Create a linked list by inserting in the rear" << endl;
    cout << "3.  Search by value" << endl;
    cout << "4.  Search by location" << endl;
    cout << "5.  Insert by value (front insert)" << endl;
    cout << "6.  Insert by value (rear insert)" << endl;
    cout << "7.  Insert by location" << endl;
    cout << "8.  Front insert" << endl;
    cout << "9.  Rear insert" << endl;
    cout << "10. Delete by value" << endl;
    cout << "11. Delete by location" << endl;
    cout << "12. Print the linked list" << endl;
x:
    cout << "Please enter the operation you want to perform:" << endl;
    int m;
    cin >> m;
    switch (m)
    {
    case 1:
        cout << "Enter the number of elements you want to insert:" << endl;
        int n1;
        cin >> n1;
        Frontbuild(list, n1);
        goto x;
    case 2:
        cout << "Enter the number of elements you want to insert:" << endl;
        int n2;
        cin >> n2;
        Rearbuild(list, n2);
        goto x;
    case 3:
        cout << "Please enter the value you want to find:" << endl;
        int n3;
        cin >> n3;
        Checklink1(list, n3);
        goto x;
    case 4:
        cout << "Please enter the location you are looking for:" << endl;
        int n4;
        cin >> n4;
        Checklink2(list, n4);
        goto x;
    case 5:
        cout << "Enter the value you want to insert:" << endl;
        int a5;
        cin >> a5;
        cout << "Please enter the value after the inserted one:" << endl;
        int b5;
        cin >> b5;
        FrontInsertlink1(list, a5, b5);
        goto x;
    case 6:
        cout << "Enter the value you want to insert:" << endl;
        int a6;
        cin >> a6;
        cout << "Please enter the value before the inserted one:" << endl;
        int b6;
        cin >> b6;
        RearInsertlink1(list, a6, b6);
        goto x;
    case 7:
        cout << "Enter the value you want to insert:" << endl;
        int a7;
        cin >> a7;
        cout << "Please enter where you want to insert:" << endl;
        int b7;
        cin >> b7;
        Insertlink2(list, a7, b7);
        goto x;
    case 8:
        cout << "Enter the element you want to insert:" << endl;
        int n8;
        cin >> n8;
        Frontinsert(list, n8);
        goto x;
    case 9:
        cout << "Enter the element you want to insert:" << endl;
        int n9;
        cin >> n9;
        Rearinsert(list, n9);
        goto x;
    case 10:
        cout << "Enter the value of the element you want to delete:" << endl;
        int n10;
        cin >> n10;
        Delete1(list, n10);
        goto x;
    case 11:
        cout << "Please enter the location of the element you want to delete:" << endl;
        int n11;
        cin >> n11;
        Delete2(list, n11);
        goto x;
    case 12:
        Printlist(list);
        goto x;
    }

}
